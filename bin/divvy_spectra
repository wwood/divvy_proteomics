#!/usr/bin/env ruby

require 'optparse'
require 'bio-logger'
require 'pp'
require 'set'

SCRIPT_NAME = File.basename(__FILE__); LOG_NAME = 'divvy_proteomics'

rootpath = File.dirname(File.dirname(__FILE__))
$: << File.join(rootpath,'lib')
require 'divvy_proteomics'

# Parse command line options into the options hash
options = {
  :logger => 'stderr',
  :log_level => 'info',
  :contaminant_regexes => [/^CNTM:/],
  :input_is_pep_xml => false,
}
o = OptionParser.new do |opts|
  opts.banner = "
    Usage: #{SCRIPT_NAME} [options] <input_file>

    Takes a tab separated file containing a (possibly modified) output from a DTAselect run (or a pepXML file and add the flag --pep-xml), and use some algorithm to divy up the spectra that match multiple peptides.\n\n"

  opts.on("--merge-proteins FILE_OF_IDENTIFIERS", "Provide a space/tab separated file where the identifiers on each row should be treated as one protein") do |file|
    options[:merge_proteins_file] = file
  end
  opts.on("--whitelist FILE_OF_PROTEINS_TO_REPORT", "Only report proteins that are in this whitelist, after divvying with everything") do |file|
    options[:whitelist_file] = file
  end
  opts.on("--contaminant-regexes REGEXES", "Comma-separated list of regular expressions to apply to protein names. If the protein name matches then all spectra assigned to that protein are considered contaminants. [default: #{options[:contaminant_prefixes]}]") do |str|
    options[:contaminant_regexes] = str.split(/,/).collect{|s| /#{s}/}
  end
  opts.separator "\nOptional arguments:\n\n"
  opts.on("--pep-xml", "Input file is pep XML, rather than a DTA select output file [default: #{options[:input_is_pep_xml]}]") do |arg|
    options[:input_is_pep_xml] = true
  end


  # logger options
  opts.separator "\nVerbosity:\n\n"
  opts.on("-q", "--quiet", "Run quietly, set logging to ERROR level [default INFO]") {options[:log_level] = 'error'}
  opts.on("--logger filename",String,"Log to file [default #{options[:logger]}]") { |name| options[:logger] = name}
  opts.on("--trace options",String,"Set log level [default INFO]. e.g. '--trace debug' to set logging level to DEBUG"){|s| options[:log_level] = s}
end; o.parse!
if ARGV.length > 1
  $stderr.puts o
  exit 1
end
# Setup logging
Bio::Log::CLI.logger(options[:logger]); Bio::Log::CLI.trace(options[:log_level]); log = Bio::Log::LoggerPlus.new(LOG_NAME); Bio::Log::CLI.configure(LOG_NAME)
#$stderr.puts options[:contaminant_prefixes].inspect

# Read in merges, if required
mergers = {}
if options[:merge_proteins_file]
  File.open(options[:merge_proteins_file]).each_line do |line|
    splits = line.strip.split(/\s+/)
    primary_id = splits[0]
    splits.each_with_index do |s, i|
      next if i==0
      raise "This script can only handle two-way merging at the moment, sorry" if splits.length > 2
      raise "ID supposedly matches to multple identifiers: #{splits[1]}" if mergers[s] and mergers[s] != primary_id
      mergers[s] = primary_id
    end
  end

  log.info "Merging of identifiers setup for #{mergers.length} different instances, e.g. #{mergers.to_a[0][0]} => #{mergers.to_a[0][1]}"
end

# Read in whitelist
whitelist = Set.new
if options[:whitelist_file]
  whitelist = File.open(options[:whitelist_file]).read.split(/\s+/)
  raise "whitelist empty" unless whitelist.length > 0
  log.info "Read in #{whitelist.length} IDs into the whitelist, only those will be reported. e.g. #{whitelist[0]}"
end

# Parse the csv file
parsed = nil
log.info "Parsing input.."
if options[:input_is_pep_xml]
  parsed = Bio::PepXML.parse(ARGF)
else
  parsed = Bio::DTASelect::OutputFile.parse(ARGF)
end
log.info "Finished parsing"

# Hashes of identifiers to objects
proteins = parsed.protein_name_to_object
hits = parsed.peptide_name_to_object


# Merge proteins that are known duplicates if need be
mergers.each do |secondary_id, primary_id|
  log.debug "Merging proteins #{primary_id} and #{secondary_id}"
  if proteins[primary_id] and proteins[secondary_id]
    # Do the merge
    log.debug "Both are defined, so doing the complicated merge"

    # Invalidate some things about the primary ID because they are no longer valid
    current_protein = proteins[primary_id]
    # These variables are not used and are not present in pepXML files, so don't mess with them.
    #    current_protein.sequence_count = nil
    #    current_protein.sequence_coverage = nil
    #    current_protein.length = nil
    #    current_protein.molwt = nil
    #    current_protein.pi = nil
    #    current_protein.validation_status = nil
    # Keep the primary proteins' description, I reckon

    # When there is spectra that are in the secondary but not the primary, add them to the primary's repertoire.
    primary = proteins[primary_id]
    secondary = proteins[secondary_id]
    primary_peptide_names = primary.peptides.collect{|pep| pep.identifier}
    log.debug "Before transfer of the second protein's peptides, the primary proteins has #{primary.peptides.length} different peptides"
    log.debug "Parent protein IDs of primary peptides: #{primary.peptides.collect{|pep| pep.parent_proteins.collect{|pro| pro.identifier}}.inspect}"
    secondary.peptides.each do |sec_pep|
      unless primary_peptide_names.include?(sec_pep.identifier)
        primary.peptides.push sec_pep
        sec_pep.parent_proteins.push primary
      end
    end
    log.debug "After transfer of the second protein's peptides, the primary proteins has #{primary.peptides.length} different peptides"
    log.debug "Parent protein IDs of primary peptides: #{primary.peptides.collect{|pep| pep.parent_proteins.collect{|pro| pro.identifier}}.inspect}"
    # Remove references second protein from the second peptides
    secondary.peptides.each do |pep|
      pep.parent_proteins.reject!{|pro| pro==secondary}
    end
    log.debug "Parent protein IDs of primary peptides: #{primary.peptides.collect{|pep| pep.parent_proteins.collect{|pro| pro.identifier}}.inspect}"
    # Remove the secondary peptide from the list of peptides
    proteins.delete secondary_id


  elsif proteins[secondary_id]
    raise "You've reached a place in the code that is implemented but untested"
    # Rename the secondary as the primary
    sec = proteins[secondary_id]
    proteins[primary_id] = sec
    proteins.delete secondary_id
    sec.identifier = primary_id
    # The peptide objects should have the correct parent proteins because it is all references

  end #The other two cases do not require any intervention,
end

id_is_contaminating = lambda do |protein_id|
  selected = false
  options[:contaminant_regexes].each do |regex|
    if protein_id.match(regex)
      selected = true
    end
  end
  selected
end


# Total spectra shouldn't count contaminants, but shared spectra should still be divvied up with
# Annoying thing here is when contaminating proteins share spectra
total_contaminating_peptides = hits.collect do |ident, peptide|
  num_contaminating_parents = peptide.parent_proteins.select do |prot|
    id_is_contaminating.call prot.identifier
  end.length

  if num_contaminating_parents > 0
    peptide.redundancy
  else
    0
  end
end
total_contaminating_spectra = total_contaminating_peptides.reduce :+
total_contaminating_spectra ||= 0
log.info "Found #{total_contaminating_spectra} contaminating spectral counts"

total_spectra = hits.collect{|ident, pep| pep.redundancy}.reduce(:+) - total_contaminating_spectra
log.info "Parsed in #{proteins.length} proteins and #{hits.length} peptides, and #{total_spectra.to_i} non-contaminating spectra"

all_peptides = hits.values.uniq
number_shared_peptides = all_peptides.select{|pep| pep.parent_proteins.length > 1}.length
number_non_shared_peptides = all_peptides.select{|pep| pep.parent_proteins.length == 1}.length
total_peptides = number_shared_peptides+number_non_shared_peptides
log.info "Found #{number_shared_peptides} (#{number_shared_peptides.to_f/total_peptides*100}%) shared peptides and #{number_non_shared_peptides} (#{number_non_shared_peptides.to_f/total_peptides*100}%) non-shared peptides"

unless options[:input_is_pep_xml]
  # Find non-starred peptides that occur only once in the file - maybe not possible given a correctly formatted file?
  non_starred_but_uniquely_identified_peptides = hits.values.select do |peptide|
    peptide.dtaselect_attributes['Unique'] == nil and peptide.parent_proteins.length == 1
  end
  log.debug "Found #{non_starred_but_uniquely_identified_peptides.length} different peptides that weren't starred or 2'd but the identifier is only found one time."
end

# OK, finished parsing the file. Now output the score for each protein
puts [
  'ID',
  'Unique spectra',
  'Non-unique spectra',
  'Estimated total spectra',
  'Normalised spectral count',
  'Description',
  'Proteins sharing spectra',
].join "\t"
log.warn "No unique spectra found!" if total_spectra == 0
proteins.each do |protein_id, protein|
  next if id_is_contaminating.call(protein_id) #Don't print contaminants

  if options[:whitelist_file].nil? or whitelist.include?(protein_id) # If there's a whitelist, apply it now
    log.debug "Now printing protein #{protein_id}, which has #{protein.peptides.length} associated peptides"
    puts [
      protein_id,
      protein.unique_spectra,
      protein.non_unique_spectra,
      protein.estimated_spectral_count,
      protein.estimated_spectral_count.to_f / total_spectra,
      protein.descriptive_name,
      protein.peptides.collect{|pep| pep.parent_proteins.collect{|pro| pro.identifier}}.flatten.uniq.reject{|i| i==protein_id}.join(','),
    ].join "\t"
  end
end






